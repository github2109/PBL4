package PacDemo;

import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;

import java.awt.BasicStroke;
import java.awt.Cursor;

import javax.swing.border.EtchedBorder;

import Model.Cable;
import Model.Router;

import java.awt.SystemColor;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Line2D;
import javax.swing.JButton;
import java.awt.Font;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.Icon;

public class CiscoClone extends JFrame implements MouseMotionListener, MouseListener {

	private JPanel contentPane;

	enum Device {
		NONE, ROUTER, CABLE_START, CABLE_END, REMOVE
	}

	Device device = Device.NONE;
	Cable tmpCable;
	static Vector<Cable> Cables = new Vector<Cable>();
	Vector<Router> Routers = new Vector<Router>();

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					CiscoClone frame = new CiscoClone();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public static Cable getCableOnScreen(int X, int Y) {
		for (int i = 0; i < Cables.size(); i++) {
			Router[] routers = Cables.get(i).getRouters();
			for (int j = -1; j <= 1; j++) {
				int xR0 = routers[0].getPointCenter().x;
				int yR0 = routers[0].getPointCenter().y;
				int xR1 = routers[1].getPointCenter().x;
				int yR1 = routers[1].getPointCenter().y;
				try {
					int k1 = (X - xR0) / (xR1 - X);
					int k2 = (Y - yR0) / (yR1 - Y);
					if (k1 == k2)
						return Cables.get(i);
				} catch (Exception e) {
				}

			}
		}
		return null;
	}

	public int[][] convertToMatrix(Vector<Router> Routers, Vector<Cable> Cables) {
		int n = Routers.size();
		int Matrix[][] = new int[n][n];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				Matrix[i][j] = 0;
				for (int k = 0; k < Cables.size(); k++) {
					if (Cables.get(k).isConnectedRouters(Routers.get(i), Routers.get(j)))
						Matrix[i][j] = Cables.get(k).getDistance();
				}
			}
		}
		return Matrix;
	}

	public CiscoClone() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1300, 684);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);

		JPanel pnAddRouter = new JPanel();
		pnAddRouter.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		pnAddRouter.setBackground(SystemColor.menu);
		pnAddRouter.setBounds(10, 81, 60, 55);
		contentPane.add(pnAddRouter);

		ImageIcon ic1 = new ImageIcon(ClassLoader.getSystemResource("Router.png"));
		Image i1 = ic1.getImage().getScaledInstance(50, 40, Image.SCALE_SMOOTH);
		ImageIcon icc1 = new ImageIcon(i1);
		JLabel picAddRouter = new JLabel(icc1);
		picAddRouter.setBounds(0, 0, 50, 40);
		pnAddRouter.add(picAddRouter);
		picAddRouter.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		picAddRouter.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				device = Device.ROUTER;
				contentPane.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
			}
		});

		JPanel pnAddCable = new JPanel();
		pnAddCable.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		pnAddCable.setBackground(SystemColor.menu);
		pnAddCable.setBounds(10, 132, 60, 55);
		contentPane.add(pnAddCable);

		ImageIcon ic2 = new ImageIcon(ClassLoader.getSystemResource("Cable.png"));
		Image i2 = ic2.getImage().getScaledInstance(50, 40, Image.SCALE_SMOOTH);
		ImageIcon icc2 = new ImageIcon(i2);
		JLabel picAddCable = new JLabel(icc2);
		picAddCable.setBounds(0, 0, 50, 40);
		pnAddCable.add(picAddCable);
		picAddCable.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

		picAddCable.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				device = Device.CABLE_START;
				contentPane.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
						new ImageIcon(ClassLoader.getSystemResource("Cable.png")).getImage(), new Point(0, 0),
						"custom cursor"));
			}
		});

		JButton btnNext = new JButton("Next");
		btnNext.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				new Client(convertToMatrix(Routers, Cables));
			}
		});
		btnNext.setFont(new Font("Tahoma", Font.PLAIN, 15));
		btnNext.setBounds(607, 602, 116, 35);
		contentPane.add(btnNext);

		JPanel pnRemove = new JPanel();
		pnRemove.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		pnRemove.setBackground(SystemColor.menu);
		pnRemove.setBounds(10, 184, 60, 55);
		contentPane.add(pnRemove);

		ImageIcon ic3 = new ImageIcon(ClassLoader.getSystemResource("Remove.png"));
		Image i3 = ic3.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);
		ImageIcon icc3 = new ImageIcon(i3);
		JLabel picRemove = new JLabel(icc3);
		picRemove.setBounds(0, 0, 50, 40);
		pnRemove.add(picRemove);
		picRemove.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		picRemove.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				device = Device.CABLE_START;
				contentPane.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
						new ImageIcon(ClassLoader.getSystemResource("Remove.png")).getImage(), new Point(0, 0),
						"custom cursor"));
				device = Device.REMOVE;
			}
		});

		addMouseListener(this);
		addMouseMotionListener(this);
	}

	@Override
	public void paint(Graphics g) {
		super.paint(g);
		if (tmpCable != null) {
			if (tmpCable.getRouters()[0] != null && tmpCable.getRouters()[0] != null) {
				Graphics2D g2 = (Graphics2D) g;
				g2.setStroke(new BasicStroke(3));
				g2.draw(new Line2D.Float(tmpCable.getRouters()[0].getPointCenter(),
						tmpCable.getRouters()[1].getPointCenter()));
			}
		}
		for (int i = 0; i < Cables.size(); i++) {
			Graphics2D g2 = (Graphics2D) g;
			g2.setStroke(new BasicStroke(3));
			Router[] routers = Cables.get(i).getRouters();
			g2.draw(new Line2D.Float(routers[0].getPointCenter(), routers[1].getPointCenter()));
			g2.setFont(new Font("arial", Font.PLAIN, 25));
			int x = (routers[0].getPointCenter().x + routers[1].getPointCenter().x) / 2;
			int y = (routers[0].getPointCenter().y + routers[1].getPointCenter().y) / 2;
			g.drawString(Cables.get(i).getDistance() + "", x, y - 7);
		}
	}

	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseMoved(MouseEvent e) {
		if (device == Device.CABLE_END) {
			tmpCable.setEndRouter(new Router(e.getX(), e.getY()));
			repaint();
		}
	}

	@Override
	public void mouseClicked(MouseEvent e) {

	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		if (this.device == Device.ROUTER) {
			device = Device.NONE;
			contentPane.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
			Router router = new Router(e.getX(), e.getY());
			Routers.add(router);
			contentPane.add(router.getRouterLabel());
			router.getRouterLabel().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			router.getRouterLabel().addMouseListener(new MouseListener() {
				@Override
				public void mouseClicked(MouseEvent e1) {

				}

				@Override
				public void mousePressed(MouseEvent e) {
					// TODO Auto-generated method stub

				}

				@Override
				public void mouseReleased(MouseEvent e) {
					// TODO Auto-generated method stub
					if (device == Device.CABLE_START) {
						tmpCable = new Cable(router);
						device = Device.CABLE_END;
					} else if (device == Device.CABLE_END) {
						if (tmpCable.getRouters()[0] == router)
							return;
						tmpCable.setEndRouter(router);
						if (Cables.contains(tmpCable))
							return;
						Cables.add(tmpCable);
						device = Device.NONE;
						contentPane.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
						repaint();
					}
				}

				@Override
				public void mouseEntered(MouseEvent e) {
					// TODO Auto-generated method stub

				}

				@Override
				public void mouseExited(MouseEvent e) {
					// TODO Auto-generated method stub

				}
			});
			router.getRouterLabel().addMouseMotionListener(new MouseMotionListener() {
				@Override
				public void mouseMoved(MouseEvent e) {
					// TODO Auto-generated method stub

				}

				@Override
				public void mouseDragged(MouseEvent e1) {
					router.setLocation(e1.getX() + router.getRouterLabel().getX(),
							e1.getY() + router.getRouterLabel().getY());
					repaint();
				}
			});
			this.repaint();
		} else if (getCableOnScreen(e.getX(), e.getY()) != null) {
			Cable cable = getCableOnScreen(e.getX(), e.getY());
			new CableDetail(cable, this);
		}
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}
}
